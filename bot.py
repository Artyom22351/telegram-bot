import os
import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import aiosqlite
from datetime import datetime
import subprocess

API_TOKEN = "7778680385:AAGVJpeP0ErASOJeYwDbt6Smjmhbm8cUlpU"
GRANT_SCRIPT = "./grant_priv.py"
DB_PATH = "orders.db"
MONO_CARD = "4441 1110 1806 7706"
PRIVAT_CARD = "5168 7451 9690 9789"

logging.basicConfig(level=logging.INFO)
bot = Bot(API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    waiting_term = State()
    waiting_payment_confirm = State()
    waiting_steamid = State()
    selected_category = State()
    selected_term = State()
    waiting_payment_screenshot = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞

# –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —Å —Ñ–ª–∞–≥–∞–º–∏
PRIVILEGES = {
    "VIP": {"7 –¥–Ω—ñ–≤": 50, "1 –º—ñ—Å—è—Ü—å": 100, "–ù–∞–∑–∞–≤–∂–¥–∏": 200, "flag": "ADMIN_LEVEL_H"},
    "Osiris": {"7 –¥–Ω—ñ–≤": 150, "1 –º—ñ—Å—è—Ü—å": 300, "–ù–∞–∑–∞–≤–∂–¥–∏": 400, "flag": "ADMIN_LEVEL_G"},
    "Zeus": {"7 –¥–Ω—ñ–≤": 500, "1 –º—ñ—Å—è—Ü—å": 1000, "–ù–∞–∑–∞–≤–∂–¥–∏": 1200, "flag": "ADMIN_LEVEL_E"},
    "Odin": {"7 –¥–Ω—ñ–≤": 450, "1 –º—ñ—Å—è—Ü—å": 700, "–ù–∞–∑–∞–≤–∂–¥–∏": 1400, "flag": "ADMIN_LEVEL_D"},
    "Thor": {"7 –¥–Ω—ñ–≤": 550, "1 –º—ñ—Å—è—Ü—å": 1100, "–ù–∞–∑–∞–≤–∂–¥–∏": 2200, "flag": "ADMIN_LEVEL_C"},
    "Anubis": {"7 –¥–Ω—ñ–≤": 1200, "1 –º—ñ—Å—è—Ü—å": 2200, "–ù–∞–∑–∞–≤–∂–¥–∏": 4400, "flag": "ADMIN_LEVEL_F"},
    "Creator": {"–ù–∞–∑–∞–≤–∂–¥–∏": 6000, "flag": "ADMIN_RESERVATION"}
}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤–∫–ª—é—á–∞–µ–º –≤–∞—à ID)
ADMIN_IDS = [1106624152]  # –í–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_user_id INTEGER,
            tg_username TEXT,
            privilege TEXT,
            term TEXT,
            amount INTEGER,
            status TEXT,
            created_at TEXT,
            paid_at TEXT,
            steam_id TEXT
        );
        """)
        await db.commit()

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for priv in PRIVILEGES.keys():
        kb.insert(types.InlineKeyboardButton(priv, callback_data=f"select_category:{priv}"))
    await message.answer("üîπ –í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –ø—Ä–∏–≤—ñ–ª–µ—é:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("select_category:"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split(":")[1]
    kb = types.InlineKeyboardMarkup(row_width=1)
    terms = PRIVILEGES[category].keys()
    for term in terms:
        if term != 'flag':  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–≥
            price = PRIVILEGES[category][term]
            kb.add(types.InlineKeyboardButton(f"{term} ‚Äî {price} UAH", callback_data=f"select_term:{category}|{term}"))
    await callback.message.answer(f"üî∏ –û–±–µ—Ä–∏ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –ø—Ä–∏–≤—ñ–ª–µ—ó <b>{category}</b>:", parse_mode="HTML", reply_markup=kb)
    await state.update_data(selected_category=category)

@dp.callback_query_handler(lambda c: c.data.startswith("select_term:"))
async def select_term(callback: types.CallbackQuery, state: FSMContext):
    category, term = callback.data.split(":")[1].split("|")
    price = PRIVILEGES[category][term]
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üí≥ Monobank", callback_data="pay_mono"),
        types.InlineKeyboardButton("üí≥ PrivatBank", callback_data="pay_privat")
    )
    await callback.message.answer(
        f"üí∞ –¢–∏ –æ–±—Ä–∞–≤: <b>{category}</b> –Ω–∞ <b>{term}</b> –°—É–º–∞: <b>{price} UAH</b>\n\n–û–±–µ—Ä–∏ —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
        parse_mode="HTML", reply_markup=kb
    )
    await state.update_data(selected_term=term, selected_price=price)
    await Form.waiting_payment_confirm.set()

@dp.callback_query_handler(lambda c: c.data == "pay_mono", state=Form.waiting_payment_confirm)
async def pay_mono(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.answer(
        f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Monobank\n\n–ü—Ä–∏–≤—ñ–ª–µ—è: <b>{data['selected_category']}</b>\n–¢–µ—Ä–º—ñ–Ω: <b>{data['selected_term']}</b>\n–°—É–º–∞: <b>{data['selected_price']} UAH</b>\n‚û°Ô∏è –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏: <code>{MONO_CARD}</code>\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª–∏ —Å—é–¥–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç.",
        parse_mode="HTML"
    )
    await Form.waiting_payment_screenshot.set()  # –ü–µ—Ä–µ—Ö—ñ–¥ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞

@dp.callback_query_handler(lambda c: c.data == "pay_privat", state=Form.waiting_payment_confirm)
async def pay_privat(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.answer(
        f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ PrivatBank\n\n–ü—Ä–∏–≤—ñ–ª–µ—è: <b>{data['selected_category']}</b>\n–¢–µ—Ä–º—ñ–Ω: <b>{data['selected_term']}</b>\n–°—É–º–∞: <b>{data['selected_price']} UAH</b>\n‚û°Ô∏è –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏: <code>{PRIVAT_CARD}</code>\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª–∏ —Å—é–¥–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç.",
        parse_mode="HTML"
    )
    await Form.waiting_payment_screenshot.set()  # –ü–µ—Ä–µ—Ö—ñ–¥ –≤ —Å—Ç–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.waiting_payment_screenshot)
async def handle_screenshot(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = await bot.download_file(file_path)
    photo_bytes = photo.read()  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes
    
    # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    photo_path = f"payment_screenshots/{file_id}.jpg"
    
    os.makedirs(os.path.dirname(photo_path), exist_ok=True)
    with open(photo_path, "wb") as f:
        f.write(photo_bytes)  # –ü–∏—à–µ–º –≤ —Ñ–∞–π–ª –∫–∞–∫ bytes

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    data = await state.get_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for admin_id in ADMIN_IDS:
        flag = PRIVILEGES[data['selected_category']].get("flag", "Unknown flag")
        await bot.send_message(
            admin_id,
            f"üîî –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã!\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} ({message.from_user.id})\n"
            f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {data['selected_category']}\n"
            f"–¢–µ—Ä–º—ñ–Ω: {data['selected_term']}\n"
            f"–°—É–º–∞: {data['selected_price']} UAH\n"
            f"–§–ª–∞–≥ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {flag}\n\n"
            f"–°–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏:\n"
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–æ–≥–æ —Å–∫—Ä–∏–Ω–∞
        await bot.send_photo(admin_id, photo)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(f"‚úÖ –°–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ! –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")

    await state.finish()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)
